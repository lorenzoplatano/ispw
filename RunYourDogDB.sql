-- MySQL Script generated by MySQL Workbench
-- Fri Jun  6 19:55:22 2025
-- Model: New Model    Version: 1.0
-- MySQL Workbench Forward Engineering

SET @OLD_UNIQUE_CHECKS=@@UNIQUE_CHECKS, UNIQUE_CHECKS=0;
SET @OLD_FOREIGN_KEY_CHECKS=@@FOREIGN_KEY_CHECKS, FOREIGN_KEY_CHECKS=0;
SET @OLD_SQL_MODE=@@SQL_MODE, SQL_MODE='ONLY_FULL_GROUP_BY,STRICT_TRANS_TABLES,NO_ZERO_IN_DATE,NO_ZERO_DATE,ERROR_FOR_DIVISION_BY_ZERO,NO_ENGINE_SUBSTITUTION';

-- -----------------------------------------------------
-- Schema mydb
-- -----------------------------------------------------
DROP SCHEMA IF EXISTS `mydb` ;

-- -----------------------------------------------------
-- Schema mydb
-- -----------------------------------------------------
CREATE SCHEMA IF NOT EXISTS `mydb` DEFAULT CHARACTER SET utf8mb3 ;
USE `mydb` ;

-- -----------------------------------------------------
-- Table `mydb`.`cane`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `mydb`.`cane` (
  `nome` VARCHAR(45) NOT NULL,
  `sesso` CHAR(1) NOT NULL,
  `razza` VARCHAR(45) NOT NULL,
  `datadinascita` DATE NULL DEFAULT NULL,
  `numeromicrochip` VARCHAR(45) NOT NULL,
  PRIMARY KEY (`numeromicrochip`))
ENGINE = InnoDB
DEFAULT CHARACTER SET = utf8mb3;


-- -----------------------------------------------------
-- Table `mydb`.`utenti`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `mydb`.`utenti` (
  `username` VARCHAR(45) NOT NULL,
  `email` VARCHAR(45) NOT NULL,
  `ruolo` ENUM('Padrone', 'Veterinario', 'Dogsitter') NOT NULL,
  `password` VARCHAR(45) NOT NULL,
  PRIMARY KEY (`email`))
ENGINE = InnoDB
DEFAULT CHARACTER SET = utf8mb3;


-- -----------------------------------------------------
-- Table `mydb`.`dogsitter`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `mydb`.`dogsitter` (
  `email` VARCHAR(45) NOT NULL,
  `nome` VARCHAR(45) NOT NULL,
  `eta` INT NOT NULL,
  `genere` CHAR(1) NOT NULL,
  `citta` VARCHAR(45) NOT NULL,
  `telefono` BIGINT NOT NULL,
  PRIMARY KEY (`email`),
  CONSTRAINT `dogcredentials`
    FOREIGN KEY (`email`)
    REFERENCES `mydb`.`utenti` (`email`))
ENGINE = InnoDB
DEFAULT CHARACTER SET = utf8mb3;


-- -----------------------------------------------------
-- Table `mydb`.`orariodogsitter`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `mydb`.`orariodogsitter` (
  `emaildogsitter` VARCHAR(100) NOT NULL,
  `giornosettimana` VARCHAR(45) NOT NULL,
  `orainizio` TIME NOT NULL,
  `orafine` TIME NOT NULL,
  PRIMARY KEY (`emaildogsitter`, `giornosettimana`, `orainizio`),
  CONSTRAINT `veterinario0`
    FOREIGN KEY (`emaildogsitter`)
    REFERENCES `mydb`.`dogsitter` (`email`))
ENGINE = InnoDB
DEFAULT CHARACTER SET = utf8mb3;


-- -----------------------------------------------------
-- Table `mydb`.`veterinario`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `mydb`.`veterinario` (
  `email` VARCHAR(45) NOT NULL,
  `nome` VARCHAR(45) NOT NULL,
  `genere` CHAR(1) NOT NULL,
  `eta` INT NOT NULL,
  `citta` VARCHAR(45) NOT NULL,
  `indirizzo` VARCHAR(100) NOT NULL,
  `telefono` BIGINT NOT NULL,
  PRIMARY KEY (`email`),
  CONSTRAINT `vetcredentials`
    FOREIGN KEY (`email`)
    REFERENCES `mydb`.`utenti` (`email`))
ENGINE = InnoDB
DEFAULT CHARACTER SET = utf8mb3;


-- -----------------------------------------------------
-- Table `mydb`.`orarioveterinario`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `mydb`.`orarioveterinario` (
  `emailveterinario` VARCHAR(100) NOT NULL,
  `giornosettimana` VARCHAR(45) NOT NULL,
  `orainizio` TIME NOT NULL,
  `orafine` TIME NOT NULL,
  PRIMARY KEY (`emailveterinario`, `giornosettimana`, `orainizio`),
  CONSTRAINT `veterinario`
    FOREIGN KEY (`emailveterinario`)
    REFERENCES `mydb`.`veterinario` (`email`))
ENGINE = InnoDB
DEFAULT CHARACTER SET = utf8mb3;


-- -----------------------------------------------------
-- Table `mydb`.`padrone`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `mydb`.`padrone` (
  `email` VARCHAR(45) NOT NULL,
  `nome` VARCHAR(45) NOT NULL,
  `telefono` BIGINT NOT NULL,
  `indirizzo` VARCHAR(100) NOT NULL,
  `cane` VARCHAR(45) NOT NULL,
  `citta` VARCHAR(45) NOT NULL,
  PRIMARY KEY (`email`),
  CONSTRAINT `cane`
    FOREIGN KEY (`cane`)
    REFERENCES `mydb`.`cane` (`numeromicrochip`)
    ON UPDATE CASCADE,
  CONSTRAINT `padcredentials`
    FOREIGN KEY (`email`)
    REFERENCES `mydb`.`utenti` (`email`))
ENGINE = InnoDB
DEFAULT CHARACTER SET = utf8mb3;

CREATE INDEX `cane_idx` ON `mydb`.`padrone` (`cane` ASC) VISIBLE;


-- -----------------------------------------------------
-- Table `mydb`.`prenotazionedogsitter`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `mydb`.`prenotazionedogsitter` (
  `ID` INT NOT NULL AUTO_INCREMENT,
  `emailPadrone` VARCHAR(45) NOT NULL,
  `emailDogsitter` VARCHAR(45) NOT NULL,
  `oraInizio` TIME NOT NULL,
  `oraFine` TIME NOT NULL,
  `data` DATE NOT NULL,
  `stato` ENUM('InAttesa', 'Accettata', 'Rifiutata', 'Cancellata', 'Conclusa') NOT NULL,
  PRIMARY KEY (`ID`),
  CONSTRAINT `dogsitter`
    FOREIGN KEY (`emailDogsitter`)
    REFERENCES `mydb`.`dogsitter` (`email`),
  CONSTRAINT `pad`
    FOREIGN KEY (`emailPadrone`)
    REFERENCES `mydb`.`padrone` (`email`))
ENGINE = InnoDB
DEFAULT CHARACTER SET = utf8mb3;

CREATE INDEX `pad_idx` ON `mydb`.`prenotazionedogsitter` (`emailPadrone` ASC) VISIBLE;

CREATE INDEX `dogsitter_idx` ON `mydb`.`prenotazionedogsitter` (`emailDogsitter` ASC) VISIBLE;


-- -----------------------------------------------------
-- Table `mydb`.`prenotazioneveterinario`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `mydb`.`prenotazioneveterinario` (
  `ID` INT NOT NULL AUTO_INCREMENT,
  `emailPadrone` VARCHAR(45) NOT NULL,
  `emailVeterinario` VARCHAR(45) NOT NULL,
  `data` DATE NOT NULL,
  `orainizio` TIME NOT NULL,
  `stato` ENUM('InAttesa', 'Accettata', 'Rifiutata', 'Cancellata', 'Conclusa') NOT NULL,
  PRIMARY KEY (`ID`),
  CONSTRAINT `padvet`
    FOREIGN KEY (`emailPadrone`)
    REFERENCES `mydb`.`padrone` (`email`),
  CONSTRAINT `vetchoice`
    FOREIGN KEY (`emailVeterinario`)
    REFERENCES `mydb`.`veterinario` (`email`))
ENGINE = InnoDB
AUTO_INCREMENT = 3
DEFAULT CHARACTER SET = utf8mb3;

CREATE INDEX `padvet_idx` ON `mydb`.`prenotazioneveterinario` (`emailPadrone` ASC) VISIBLE;

CREATE INDEX `vetchoice_idx` ON `mydb`.`prenotazioneveterinario` (`emailVeterinario` ASC) VISIBLE;


-- -----------------------------------------------------
-- Table `mydb`.`vaccinazioni`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `mydb`.`vaccinazioni` (
  `cane` VARCHAR(45) NOT NULL,
  `vaccinazione` VARCHAR(45) NOT NULL,
  PRIMARY KEY (`cane`, `vaccinazione`),
  CONSTRAINT `canevaccinato`
    FOREIGN KEY (`cane`)
    REFERENCES `mydb`.`cane` (`numeromicrochip`)
    ON UPDATE CASCADE)
ENGINE = InnoDB
DEFAULT CHARACTER SET = utf8mb3;

USE `mydb` ;

-- -----------------------------------------------------
-- procedure accettaPrenotazione
-- -----------------------------------------------------

DELIMITER $$
USE `mydb`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `accettaPrenotazione`(
    IN p_ID    INT,
    IN p_tipo  INT    
)
BEGIN
    DECLARE v_exists INT;
    
	DECLARE EXIT HANDLER FOR SQLEXCEPTION
    BEGIN
        ROLLBACK;
        RESIGNAL;
    END;


    START TRANSACTION;

    IF p_tipo = 1 THEN
        
        SELECT COUNT(*) 
          INTO v_exists
          FROM `mydb`.`prenotazioneveterinario`
         WHERE `ID` = p_ID
           AND `stato` = 'InAttesa';

        IF v_exists = 0 THEN
            SIGNAL SQLSTATE '45000'
              SET MESSAGE_TEXT = 'Prenotazione veterinario non trovata o non in stato InAttesa';
        ELSE
            UPDATE `mydb`.`prenotazioneveterinario`
               SET `stato` = 'Accettata'
             WHERE `ID` = p_ID;
        END IF;

    ELSEIF p_tipo = 2 THEN
        
        SELECT COUNT(*) 
          INTO v_exists
          FROM `mydb`.`prenotazionedogsitter`
         WHERE `ID` = p_ID
           AND `stato` = 'InAttesa';

        IF v_exists = 0 THEN
            SIGNAL SQLSTATE '45000'
              SET MESSAGE_TEXT = 'Prenotazione dogsitter non trovata o non in stato InAttesa';
        ELSE
            UPDATE `mydb`.`prenotazionedogsitter`
               SET `stato` = 'Accettata'
             WHERE `ID` = p_ID;
        END IF;

    ELSE
        
        SIGNAL SQLSTATE '45000'
          SET MESSAGE_TEXT = 'Parametro p_tipo non valido: usare 1 per veterinario, 2 per dogsitter';
    END IF;
    
    COMMIT;
END$$

DELIMITER ;

-- -----------------------------------------------------
-- procedure cancellaPrenotazione
-- -----------------------------------------------------

DELIMITER $$
USE `mydb`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `cancellaPrenotazione`(
    IN p_ID    INT,
    IN p_tipo  INT    
)
BEGIN
    DECLARE v_exists INT;
    
    DECLARE EXIT HANDLER FOR SQLEXCEPTION
    BEGIN
        ROLLBACK;
        RESIGNAL;
    END;


    START TRANSACTION;

    IF p_tipo = 1 THEN
        
        SELECT COUNT(*) 
          INTO v_exists
          FROM `mydb`.`prenotazioneveterinario`
         WHERE `ID` = p_ID
         AND `stato` IN ('InAttesa', 'Accettata');
         

        IF v_exists = 0 THEN
            SIGNAL SQLSTATE '45000'
              SET MESSAGE_TEXT = 'Prenotazione veterinario non trovata o non in stato Accettata/InAttesa';
        ELSE
            UPDATE `mydb`.`prenotazioneveterinario`
               SET `stato` = 'Cancellata'
             WHERE `ID` = p_ID;
        END IF;

    ELSEIF p_tipo = 2 THEN
        
        SELECT COUNT(*) 
          INTO v_exists
          FROM `mydb`.`prenotazionedogsitter`
         WHERE `ID` = p_ID
            AND `stato` IN ('InAttesa', 'Accettata');

        IF v_exists = 0 THEN
            SIGNAL SQLSTATE '45000'
              SET MESSAGE_TEXT = 'Prenotazione dogsitter non trovata o non in stato Accettata/InAttesa';
        ELSE
            UPDATE `mydb`.`prenotazionedogsitter`
               SET `stato` = 'Cancellata'
             WHERE `ID` = p_ID;
        END IF;

    ELSE
        
        SIGNAL SQLSTATE '45000'
          SET MESSAGE_TEXT = 'Parametro p_tipo non valido: usare 1 per veterinario, 2 per dogsitter';
    END IF;
    
    COMMIT;
END$$

DELIMITER ;

-- -----------------------------------------------------
-- procedure check_email
-- -----------------------------------------------------

DELIMITER $$
USE `mydb`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `check_email`(
    IN p_email VARCHAR(255),
    OUT p_result INT
)
BEGIN

	DECLARE EXIT HANDLER FOR SQLEXCEPTION
    BEGIN
        ROLLBACK;
        RESIGNAL;
    END;


    START TRANSACTION;


   
    SET p_result = 0;
    
    IF EXISTS (SELECT 1 FROM utenti WHERE email = p_email) THEN
        SET p_result = 1;  
    END IF;
    
    COMMIT;
END$$

DELIMITER ;

-- -----------------------------------------------------
-- procedure check_overlap
-- -----------------------------------------------------

DELIMITER $$
USE `mydb`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `check_overlap`(
    IN p_emailPadrone   VARCHAR(45),
    IN p_data           DATE,
    IN p_oraInizio      TIME,
    IN p_oraFine        TIME,
    OUT p_overlap_count  INT
)
BEGIN
   
	DECLARE EXIT HANDLER FOR SQLEXCEPTION
    BEGIN
        ROLLBACK;
        RESIGNAL;
    END;


    START TRANSACTION;
	
    SELECT COUNT(*) INTO p_overlap_count
    FROM prenotazionedogsitter
    WHERE emailPadrone = p_emailPadrone
      AND data        = p_data
      AND oraInizio   < p_oraFine
      AND oraFine     > p_oraInizio
      AND stato NOT IN ('Rifiutata', 'Cancellata', 'Conclusa');
      
	COMMIT;

END$$

DELIMITER ;

-- -----------------------------------------------------
-- procedure concludiPrenotazione
-- -----------------------------------------------------

DELIMITER $$
USE `mydb`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `concludiPrenotazione`(
    IN p_ID    INT,
    IN p_tipo  INT    
)
BEGIN
    DECLARE v_exists INT;
    
    DECLARE EXIT HANDLER FOR SQLEXCEPTION
    BEGIN
        ROLLBACK;
        RESIGNAL;
    END;


    START TRANSACTION;

    IF p_tipo = 1 THEN
        
        SELECT COUNT(*) 
          INTO v_exists
          FROM `mydb`.`prenotazioneveterinario`
         WHERE `ID` = p_ID
           AND `stato` = 'Accettata';

        IF v_exists = 0 THEN
            SIGNAL SQLSTATE '45000'
              SET MESSAGE_TEXT = 'Prenotazione veterinario non trovata o non in stato Accettata';
        ELSE
            UPDATE `mydb`.`prenotazioneveterinario`
               SET `stato` = 'Conclusa'
             WHERE `ID` = p_ID;
        END IF;

    ELSEIF p_tipo = 2 THEN
        
        SELECT COUNT(*) 
          INTO v_exists
          FROM `mydb`.`prenotazionedogsitter`
         WHERE `ID` = p_ID
           AND `stato` = 'Accettata';

        IF v_exists = 0 THEN
            SIGNAL SQLSTATE '45000'
              SET MESSAGE_TEXT = 'Prenotazione dogsitter non trovata o non in stato Accettata';
        ELSE
            UPDATE `mydb`.`prenotazionedogsitter`
               SET `stato` = 'Conclusa'
             WHERE `ID` = p_ID;
        END IF;

    ELSE
        
        SIGNAL SQLSTATE '45000'
          SET MESSAGE_TEXT = 'Parametro p_tipo non valido: usare 1 per veterinario, 2 per dogsitter';
    END IF;
    
    COMMIT;
END$$

DELIMITER ;

-- -----------------------------------------------------
-- procedure creaPrenotazioneDogsitter
-- -----------------------------------------------------

DELIMITER $$
USE `mydb`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `creaPrenotazioneDogsitter`(
    IN in_emailDogsitter  VARCHAR(45),
    IN in_emailPadrone    VARCHAR(45),
    IN in_data            DATE,
    IN in_orainizio       TIME,
    IN in_orafine         TIME
)
BEGIN
    
    DECLARE EXIT HANDLER FOR SQLEXCEPTION
    BEGIN
        ROLLBACK;
        RESIGNAL;
    END;


    START TRANSACTION;
    
    INSERT INTO prenotazionedogsitter
        (emailPadrone, emailDogsitter, `data`, oraInizio, oraFine, stato)
    VALUES
        (in_emailPadrone, in_emailDogsitter, in_data, in_orainizio, in_orafine, 'InAttesa');
        
	COMMIT;
END$$

DELIMITER ;

-- -----------------------------------------------------
-- procedure creaPrenotazioneVeterinario
-- -----------------------------------------------------

DELIMITER $$
USE `mydb`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `creaPrenotazioneVeterinario`(
    IN in_emailVeterinario  VARCHAR(45),
    IN in_emailPadrone    VARCHAR(45),
    IN in_data            DATE,
    IN in_orainizio       TIME
)
BEGIN
    
    DECLARE EXIT HANDLER FOR SQLEXCEPTION
    BEGIN
        ROLLBACK;
        RESIGNAL;
    END;


    START TRANSACTION;
    
    
    INSERT INTO prenotazioneveterinario
        (emailPadrone, emailVeterinario, `data`, oraInizio, stato)
    VALUES
        (in_emailPadrone, in_emailVeterinario, in_data, in_orainizio, 'InAttesa');
        
        
	COMMIT;
END$$

DELIMITER ;

-- -----------------------------------------------------
-- procedure getCaneData
-- -----------------------------------------------------

DELIMITER $$
USE `mydb`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `getCaneData`(
    IN p_email     VARCHAR(45),
    IN p_password  VARCHAR(45)
)
BEGIN

	DECLARE EXIT HANDLER FOR SQLEXCEPTION
    BEGIN
        ROLLBACK;
        RESIGNAL;
    END;


    START TRANSACTION;
	
    SELECT 
        C.*,
        V.vaccinazione
    FROM 
        mydb.Cane C
        JOIN mydb.Padrone P
          ON C.numeromicrochip = P.cane
        JOIN mydb.Utenti U
          ON U.email = P.email
        LEFT JOIN mydb.Vaccinazioni V
          ON C.numeromicrochip = V.cane
    WHERE
        U.email      = p_email
        AND U.`password` = MD5(p_password)
        AND U.ruolo   = 'Padrone';
        
        
	COMMIT;
END$$

DELIMITER ;

-- -----------------------------------------------------
-- procedure getDogsitterData
-- -----------------------------------------------------

DELIMITER $$
USE `mydb`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `getDogsitterData`(
    IN input_email     VARCHAR(45),
    IN input_password  VARCHAR(45)
)
BEGIN
    
    
    DECLARE EXIT HANDLER FOR SQLEXCEPTION
    BEGIN
        ROLLBACK;
        RESIGNAL;
    END;


    START TRANSACTION;
    
    SELECT 
        d.email,
        d.nome,
        d.genere,
        d.eta,
        d.citta,
        d.telefono
    FROM 
        mydb.Dogsitter d
        JOIN mydb.Utenti u
          ON u.email = d.email
    WHERE
        u.email        = input_email
        AND u.`password` = MD5(input_password)
        AND u.ruolo      = 'Dogsitter';
        
	COMMIT;
END$$

DELIMITER ;

-- -----------------------------------------------------
-- procedure getDogsitterDisponibili
-- -----------------------------------------------------

DELIMITER $$
USE `mydb`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `getDogsitterDisponibili`(
    IN p_data         DATE,
    IN p_citta        VARCHAR(45),
    IN p_orainizio    TIME,
    IN p_orafine      TIME
)
BEGIN
    DECLARE p_giorno VARCHAR(45);
    
    DECLARE EXIT HANDLER FOR SQLEXCEPTION
    BEGIN
        ROLLBACK;
        RESIGNAL;
    END;


    START TRANSACTION;

    SET p_giorno = CASE DAYOFWEEK(p_data)
        WHEN 1 THEN 'Domenica'
        WHEN 2 THEN 'Lunedì'
        WHEN 3 THEN 'Martedì'
        WHEN 4 THEN 'Mercoledì'
        WHEN 5 THEN 'Giovedì'
        WHEN 6 THEN 'Venerdì'
        WHEN 7 THEN 'Sabato'
    END;

    SELECT
        ds.email,
        ds.nome,
        ds.eta,
        ds.genere,
        ds.telefono
    FROM
        `mydb`.`dogsitter`       AS ds
        
        JOIN `mydb`.`Utenti`     AS u
          ON u.email = ds.email
         AND u.ruolo = 'Dogsitter'
        
        JOIN `mydb`.`OrarioDogsitter` AS ods
          ON ods.emailDogsitter = ds.email
    WHERE
        ds.citta            = p_citta
        AND ods.giornosettimana = p_giorno
        AND ods.orainizio    <= p_orainizio
        AND ods.orafine      >= p_orafine
    ORDER BY
        ds.nome;
        
        
	COMMIT;
END$$

DELIMITER ;

-- -----------------------------------------------------
-- procedure getDogsitterOrari
-- -----------------------------------------------------

DELIMITER $$
USE `mydb`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `getDogsitterOrari`(
    IN input_email     VARCHAR(45),
    IN input_password  VARCHAR(45)
)
BEGIN
    
    DECLARE EXIT HANDLER FOR SQLEXCEPTION
    BEGIN
        ROLLBACK;
        RESIGNAL;
    END;


    START TRANSACTION;
    
    SELECT 
        od.giornosettimana,
        od.orainizio,
        od.orafine
    FROM 
        mydb.OrarioDogsitter od
        JOIN mydb.Utenti u
          ON u.email = od.emailDogsitter
    WHERE
        u.email        = input_email
        AND u.`password` = MD5(input_password)
        AND u.ruolo      = 'Dogsitter'
    ORDER BY 
        FIELD(
          od.giornosettimana,
          'Lunedì','Martedì','Mercoledì',
          'Giovedì','Venerdì','Sabato','Domenica'
        );
        
        
	COMMIT;
END$$

DELIMITER ;

-- -----------------------------------------------------
-- procedure getPadroneData
-- -----------------------------------------------------

DELIMITER $$
USE `mydb`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `getPadroneData`(
    IN p_email     VARCHAR(45),
    IN p_password  VARCHAR(45)
)
BEGIN
    
    DECLARE EXIT HANDLER FOR SQLEXCEPTION
    BEGIN
        ROLLBACK;
        RESIGNAL;
    END;


    START TRANSACTION;
    
    SELECT 
        p.email,
        p.nome,
        p.telefono,
        p.indirizzo,
        p.cane,
        p.citta
    FROM 
        Padrone p
        JOIN Utenti u
          ON u.email = p.email
    WHERE
        u.email    = p_email
        AND u.`password` = MD5(p_password)
        AND u.ruolo   = 'Padrone';
        
        
	COMMIT;
END$$

DELIMITER ;

-- -----------------------------------------------------
-- procedure getPrenotazioniDogsitter
-- -----------------------------------------------------

DELIMITER $$
USE `mydb`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `getPrenotazioniDogsitter`(
    IN p_emailDogsitter VARCHAR(45)
)
BEGIN

DECLARE EXIT HANDLER FOR SQLEXCEPTION
    BEGIN
        ROLLBACK;
        RESIGNAL;
    END;


    START TRANSACTION;

UPDATE `mydb`.`prenotazionedogsitter` pd
    SET pd.`stato` = 'Conclusa'
    WHERE pd.`emailDogsitter` = p_emailDogsitter
      AND pd.`stato` = 'Accettata'
      AND (
          pd.`data` < CURDATE()
          OR (pd.`data` = CURDATE() AND pd.`oraFine` < CURTIME())
      );

    SELECT
        pd.`ID`                  AS idPrenotazione,
        pd.`data`                AS dataPrenotazione,
        c.`nome`                 AS nomeCane,
        c.`razza`                AS razzaCane,
        p.`nome`                 AS nomePadrone,
		pd.`oraInizio`           AS orarioInizio,
        pd.`oraFine`             AS orarioFine,
        CASE pd.`stato`
            WHEN 'InAttesa'     THEN 1
            WHEN 'Accettata'    THEN 2
            WHEN 'Rifiutata'    THEN 3
            WHEN 'Cancellata'   THEN 4
            WHEN 'Conclusa'     THEN 5
        END                      AS stato
    FROM
        `mydb`.`prenotazionedogsitter` pd
        JOIN `mydb`.`padrone`              p  ON pd.`emailPadrone`   = p.`email`
        JOIN `mydb`.`cane`                 c  ON p.`cane`            = c.`numeromicrochip`
    WHERE
        pd.`emailDogsitter` = p_emailDogsitter
    ORDER BY
        pd.`data`, pd.`oraInizio`;
        
	COMMIT;
END$$

DELIMITER ;

-- -----------------------------------------------------
-- procedure getPrenotazioniPadrone
-- -----------------------------------------------------

DELIMITER $$
USE `mydb`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `getPrenotazioniPadrone`(
    IN p_email VARCHAR(45)
)
BEGIN

DECLARE EXIT HANDLER FOR SQLEXCEPTION
    BEGIN
        ROLLBACK;
        RESIGNAL;
    END;


    START TRANSACTION;
    
 UPDATE `mydb`.`prenotazionedogsitter` pd
    SET pd.`stato` = 'Conclusa'
    WHERE pd.`emailPadrone` = p_email
      AND pd.`stato` = 'Accettata'
      AND (
          pd.`data` < CURDATE()
          OR (pd.`data` = CURDATE() AND pd.`oraFine` < CURTIME())
      );

   
UPDATE `mydb`.`prenotazioneveterinario` pv
    SET pv.`stato` = 'Conclusa'
    WHERE pv.`emailPadrone` = p_email
      AND pv.`stato` = 'Accettata'
      AND pv.`data` < CURDATE();
      
    SELECT
        pd.`ID`            AS idPrenotazione,
        pd.`data`          AS dataPrenotazione,
        2       AS tipo,
        ds.`nome`          AS lavoratore,
        pd.`oraInizio`           AS orarioInizio,
        pd.`oraFine`             AS orarioFine,
        CASE pd.`stato`
            WHEN 'InAttesa' THEN 1
            WHEN 'Accettata' THEN 2
            WHEN 'Rifiutata' THEN 3
            WHEN 'Cancellata' THEN 4
			WHEN 'Conclusa'   THEN 5
        END               AS stato
    FROM
        `mydb`.`prenotazionedogsitter` pd
        JOIN `mydb`.`dogsitter`         ds
          ON pd.`emailDogsitter` = ds.`email`
    WHERE
        pd.`emailPadrone` = p_email

    UNION ALL

    SELECT
        pv.`ID`            AS idPrenotazione,
        pv.`data`          AS dataPrenotazione,
        1      AS tipo,
        v.`nome`           AS lavoratore,
        pv.`oraInizio`           AS orarioInizio,
        NULL            AS orarioFine,
        CASE pv.`stato`
            WHEN 'InAttesa' THEN 1
            WHEN 'Accettata' THEN 2
            WHEN 'Rifiutata' THEN 3
            WHEN 'Cancellata' THEN 4
			WHEN 'Conclusa'   THEN 5
        END               AS stato
    FROM
        `mydb`.`prenotazioneveterinario` pv
        JOIN `mydb`.`veterinario`        v
          ON pv.`emailVeterinario` = v.`email`
    WHERE
        pv.`emailPadrone` = p_email

    ORDER BY
        dataPrenotazione;
        
	COMMIT;

END$$

DELIMITER ;

-- -----------------------------------------------------
-- procedure getPrenotazioniVeterinario
-- -----------------------------------------------------

DELIMITER $$
USE `mydb`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `getPrenotazioniVeterinario`(
    IN p_emailVeterinario VARCHAR(45)
)
BEGIN

DECLARE EXIT HANDLER FOR SQLEXCEPTION
    BEGIN
        ROLLBACK;
        RESIGNAL;
    END;


    START TRANSACTION;

UPDATE `mydb`.`prenotazioneveterinario` pv
    SET pv.`stato` = 'Conclusa'
    WHERE pv.`emailVeterinario` = p_emailVeterinario
      AND pv.`stato` = 'Accettata'
      AND pv.`data` < CURDATE();
      
    SELECT
        pv.`ID`                  AS idPrenotazione,
        pv.`data`                AS dataPrenotazione,
        c.`nome`                 AS nomeCane,
        c.`razza`                AS razzaCane,
        p.`nome`                 AS nomePadrone,
		pv.`oraInizio`           AS orarioInizio,
        CASE pv.`stato`
            WHEN 'InAttesa'     THEN 1
            WHEN 'Accettata'    THEN 2
            WHEN 'Rifiutata'    THEN 3
            WHEN 'Cancellata'   THEN 4
            WHEN 'Conclusa'     THEN 5
        END                      AS stato
    FROM
        `mydb`.`prenotazioneveterinario` pv
        JOIN `mydb`.`padrone`              p  ON pv.`emailPadrone`   = p.`email`
        JOIN `mydb`.`cane`                 c  ON p.`cane`            = c.`numeromicrochip`
    WHERE
        pv.`emailVeterinario` = p_emailVeterinario
    ORDER BY
        pv.`data`, pv.`oraInizio`;
        
	COMMIT;
END$$

DELIMITER ;

-- -----------------------------------------------------
-- procedure getVeterinariDisponibili
-- -----------------------------------------------------

DELIMITER $$
USE `mydb`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `getVeterinariDisponibili`(
    IN p_data         DATE,
    IN p_citta        VARCHAR(45),
    IN p_orainizio    TIME
)
BEGIN
    DECLARE p_giorno VARCHAR(45);
    
    DECLARE EXIT HANDLER FOR SQLEXCEPTION
    BEGIN
        ROLLBACK;
        RESIGNAL;
    END;


    START TRANSACTION;

    SET p_giorno = CASE DAYOFWEEK(p_data)
        WHEN 1 THEN 'Domenica'
        WHEN 2 THEN 'Lunedì'
        WHEN 3 THEN 'Martedì'
        WHEN 4 THEN 'Mercoledì'
        WHEN 5 THEN 'Giovedì'
        WHEN 6 THEN 'Venerdì'
        WHEN 7 THEN 'Sabato'
    END;

    SELECT
        v.email,
        v.nome,
        v.eta,
        v.genere,
        v.telefono,
        v.indirizzo
    FROM
        `mydb`.`veterinario`       AS v
        
        JOIN `mydb`.`Utenti`     AS u
          ON u.email = v.email
         AND u.ruolo = 'Veterinario'
        
        JOIN `mydb`.`OrarioVeterinario` AS ov
          ON ov.emailVeterinario = v.email
    WHERE
        v.citta            = p_citta
        AND ov.giornosettimana = p_giorno
        AND ov.orainizio    <= p_orainizio
        AND ov.orafine      >= p_orainizio
    ORDER BY
        v.nome;
        
	COMMIT;
END$$

DELIMITER ;

-- -----------------------------------------------------
-- procedure getVeterinarioData
-- -----------------------------------------------------

DELIMITER $$
USE `mydb`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `getVeterinarioData`(
    IN input_email     VARCHAR(45),
    IN input_password  VARCHAR(45)
)
BEGIN

	DECLARE EXIT HANDLER FOR SQLEXCEPTION
    BEGIN
        ROLLBACK;
        RESIGNAL;
    END;


    START TRANSACTION;
	
    SELECT 
        v.email,
        v.nome,
        v.genere,
        v.eta,
        v.citta,
        v.indirizzo,
        v.telefono
    FROM 
        mydb.Veterinario v
        JOIN mydb.Utenti u
          ON u.email = v.email
    WHERE
        u.email      = input_email
        AND u.`password` = MD5(input_password)
        AND u.ruolo   = 'Veterinario';
        
	COMMIT;
END$$

DELIMITER ;

-- -----------------------------------------------------
-- procedure getVeterinarioOrari
-- -----------------------------------------------------

DELIMITER $$
USE `mydb`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `getVeterinarioOrari`(
    IN input_email     VARCHAR(45),
    IN input_password  VARCHAR(45)
)
BEGIN

	DECLARE EXIT HANDLER FOR SQLEXCEPTION
    BEGIN
        ROLLBACK;
        RESIGNAL;
    END;


    START TRANSACTION;
    
    SELECT 
        ov.giornosettimana,
        ov.orainizio,
        ov.orafine
    FROM 
        mydb.OrarioVeterinario ov
        JOIN mydb.Utenti u
          ON u.email = ov.emailveterinario
    WHERE
        u.email    = input_email
        AND u.`password` = MD5(input_password)
        AND u.ruolo   = 'Veterinario'
    ORDER BY 
        FIELD(
          ov.giornosettimana,
          'Lunedì','Martedì','Mercoledì',
          'Giovedì','Venerdì','Sabato','Domenica'
        );
        
        
	COMMIT;
END$$

DELIMITER ;

-- -----------------------------------------------------
-- procedure login
-- -----------------------------------------------------

DELIMITER $$
USE `mydb`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `login`(in var_email varchar(45), in var_pass varchar(45), out var_role INT, out var_username varchar(45))
BEGIN
    declare var_user_role ENUM('Padrone', 'Veterinario', 'Dogsitter');
    
    DECLARE EXIT HANDLER FOR SQLEXCEPTION
    BEGIN
        ROLLBACK;
        RESIGNAL;
    END;


    START TRANSACTION;
    
    select `ruolo` from `Utenti`
        where `email` = var_email
        and `password` = md5(var_pass)
        into var_user_role;
	select `username` from `Utenti`
        where `email` = var_email
        and `password` = md5(var_pass)
        into var_username;
        
    
        if var_user_role = 'Padrone' then
            set var_role = 1;
        elseif var_user_role = 'Veterinario' then
            set var_role = 2;
		elseif var_user_role = 'Dogsitter' then
            set var_role = 3;
        else
            set var_role = 4;
        end if;
        
        COMMIT;
END$$

DELIMITER ;

-- -----------------------------------------------------
-- procedure registrazioneDogsitter
-- -----------------------------------------------------

DELIMITER $$
USE `mydb`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `registrazioneDogsitter`(
    IN in_username VARCHAR(45),
    IN in_email    VARCHAR(45),
    IN in_password VARCHAR(45),
    IN in_nome     VARCHAR(45),
    IN in_eta      INT,
    IN in_genere   CHAR(1),
    IN in_citta    VARCHAR(45),
    IN in_telefono BIGINT,
    IN in_orari    TEXT
)
BEGIN
    DECLARE giorno        VARCHAR(45);
    DECLARE orainizio     TIME;
    DECLARE orafine       TIME;
    DECLARE orario_text   VARCHAR(2048);
    
    DECLARE EXIT HANDLER FOR SQLEXCEPTION
    BEGIN
        ROLLBACK;
        RESIGNAL;
    END;


    START TRANSACTION;

  
    INSERT INTO Utenti (username, email, ruolo, `password`)
    VALUES (in_username, in_email, 'Dogsitter', MD5(in_password));


    INSERT INTO Dogsitter (email, nome, eta, genere, citta, telefono)
    VALUES (in_email, in_nome, in_eta, in_genere, in_citta, in_telefono);

  
    SET in_orari = CONCAT(in_orari, ';');

    parsing_loop: WHILE CHAR_LENGTH(in_orari) > 0 DO
        SET orario_text = SUBSTRING_INDEX(in_orari, ';', 1);

        IF CHAR_LENGTH(TRIM(orario_text)) = 0 THEN
            LEAVE parsing_loop;
        END IF;

        SET giorno    = TRIM(SUBSTRING_INDEX(orario_text, ',', 1));
        SET orainizio = STR_TO_DATE(
                           SUBSTRING_INDEX(
                             SUBSTRING_INDEX(orario_text, ',', -2)
                           , ',', 1)
                         , '%H:%i:%s');
        SET orafine   = STR_TO_DATE(
                           SUBSTRING_INDEX(orario_text, ',', -1)
                         , '%H:%i:%s');

        INSERT INTO OrarioDogsitter
          (emailDogsitter, giornosettimana, orainizio, orafine)
        VALUES
          (in_email, giorno, orainizio, orafine);

        SET in_orari = SUBSTRING(in_orari,
                          CHAR_LENGTH(orario_text) + 2);
    END WHILE;
    
    COMMIT;
END$$

DELIMITER ;

-- -----------------------------------------------------
-- procedure registrazionePadrone
-- -----------------------------------------------------

DELIMITER $$
USE `mydb`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `registrazionePadrone`(
    IN in_username VARCHAR(45),
    IN in_email VARCHAR(45),
    IN in_password VARCHAR(45),
    IN in_nome VARCHAR(45),
    IN in_telefono BIGINT,
    IN in_indirizzo VARCHAR(100),
    IN in_nomeCane VARCHAR(45),
    IN in_sesso CHAR(1),
    IN in_razza VARCHAR(45),
    IN in_dataNascita DATE,
    IN in_microchip VARCHAR(45),
    IN in_vaccinazioni TEXT,
    IN in_citta VARCHAR(45)
)
BEGIN
    DECLARE vaccino VARCHAR(45);
    DECLARE pos INT DEFAULT 1;
    DECLARE len INT;
    
    DECLARE EXIT HANDLER FOR SQLEXCEPTION
    BEGIN
        ROLLBACK;
        RESIGNAL;
    END;


    START TRANSACTION;

   
    INSERT INTO Utenti (username, email, ruolo, `password`)
    VALUES (in_username, in_email, 'Padrone', md5(in_password));

    
    INSERT INTO Cane (nome, sesso, razza, datadinascita, numeromicrochip)
    VALUES (in_nomeCane, in_sesso, in_razza, in_dataNascita, in_microchip);

    
    INSERT INTO Padrone (email, nome, telefono, indirizzo, cane, citta)
    VALUES (in_email, in_nome, in_telefono, in_indirizzo, in_microchip, in_citta);

    
    SET in_vaccinazioni = CONCAT(in_vaccinazioni, ','); 
    SET len = LENGTH(in_vaccinazioni);

    WHILE pos < len DO
        SET vaccino = SUBSTRING_INDEX(SUBSTRING(in_vaccinazioni, pos), ',', 1);
        SET pos = pos + LENGTH(vaccino) + 1;

        INSERT INTO Vaccinazioni (cane, vaccinazione)
        VALUES (in_microchip, TRIM(vaccino));
    END WHILE;
    
    COMMIT;
END$$

DELIMITER ;

-- -----------------------------------------------------
-- procedure registrazioneVeterinario
-- -----------------------------------------------------

DELIMITER $$
USE `mydb`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `registrazioneVeterinario`(
    IN in_username VARCHAR(45),
    IN in_email VARCHAR(45),
    IN in_password VARCHAR(45),
    IN in_nome VARCHAR(45),
    IN in_eta INT,
    IN in_genere CHAR(1),
    IN in_citta VARCHAR(45),
    IN in_indirizzo VARCHAR(100),
    IN in_telefono BIGINT,
    IN in_orari TEXT
)
BEGIN
    DECLARE giorno VARCHAR(45);
    DECLARE orainizio TIME;
    DECLARE orafine TIME;
    DECLARE pos INT DEFAULT 1;
    DECLARE len INT;
    DECLARE orario_text VARCHAR(2048);
    
    DECLARE EXIT HANDLER FOR SQLEXCEPTION
    BEGIN
        ROLLBACK;
        RESIGNAL;
    END;


    START TRANSACTION;

  
    INSERT INTO Utenti (username, email, ruolo, `password`)
    VALUES (in_username, in_email, 'Veterinario', MD5(in_password));

 
    INSERT INTO Veterinario (email, nome, genere, eta, citta, indirizzo, telefono)
    VALUES (in_email, in_nome, in_genere, in_eta, in_citta, in_indirizzo, in_telefono);

      -- dopo gli INSERT in Utenti e Veterinario…

 
  SET in_orari = CONCAT(in_orari, ';');


  parsing_loop: WHILE CHAR_LENGTH(in_orari) > 0 DO
  
    SET orario_text = SUBSTRING_INDEX(in_orari, ';', 1);

 
    IF CHAR_LENGTH(TRIM(orario_text)) = 0 THEN
      LEAVE parsing_loop;
    END IF;
    
    SET giorno     = SUBSTRING_INDEX(orario_text, ',',  1);
    SET orainizio  = STR_TO_DATE(
                        SUBSTRING_INDEX(
                          SUBSTRING_INDEX(orario_text, ',', -2)
                        , ',', 1)
                      , '%H:%i:%s');
    SET orafine    = STR_TO_DATE(
                        SUBSTRING_INDEX(orario_text, ',', -1)
                      , '%H:%i:%s');

    
    INSERT INTO OrarioVeterinario
      (emailveterinario, giornosettimana, orainizio, orafine)
    VALUES
      (in_email, TRIM(giorno), orainizio, orafine);

    
    SET in_orari = SUBSTRING(in_orari,
                      CHAR_LENGTH(orario_text) + 2
                    );
  END WHILE;
  
  COMMIT;

END$$

DELIMITER ;

-- -----------------------------------------------------
-- procedure rifiutaPrenotazione
-- -----------------------------------------------------

DELIMITER $$
USE `mydb`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `rifiutaPrenotazione`(
    IN p_ID    INT,
    IN p_tipo  INT    
)
BEGIN
    DECLARE v_exists INT;
    
    DECLARE EXIT HANDLER FOR SQLEXCEPTION
    BEGIN
        ROLLBACK;
        RESIGNAL;
    END;


    START TRANSACTION;

    IF p_tipo = 1 THEN
        
        SELECT COUNT(*) 
          INTO v_exists
          FROM `mydb`.`prenotazioneveterinario`
         WHERE `ID` = p_ID
           AND `stato` = 'InAttesa';

        IF v_exists = 0 THEN
            SIGNAL SQLSTATE '45000'
              SET MESSAGE_TEXT = 'Prenotazione veterinario non trovata o non in stato InAttesa';
        ELSE
            UPDATE `mydb`.`prenotazioneveterinario`
               SET `stato` = 'Rifiutata'
             WHERE `ID` = p_ID;
        END IF;

    ELSEIF p_tipo = 2 THEN
        
        SELECT COUNT(*) 
          INTO v_exists
          FROM `mydb`.`prenotazionedogsitter`
         WHERE `ID` = p_ID
           AND `stato` = 'InAttesa';

        IF v_exists = 0 THEN
            SIGNAL SQLSTATE '45000'
              SET MESSAGE_TEXT = 'Prenotazione dogsitter non trovata o non in stato InAttesa';
        ELSE
            UPDATE `mydb`.`prenotazionedogsitter`
               SET `stato` = 'Rifiutata'
             WHERE `ID` = p_ID;
        END IF;

    ELSE
        
        SIGNAL SQLSTATE '45000'
          SET MESSAGE_TEXT = 'Parametro p_tipo non valido: usare 1 per veterinario, 2 per dogsitter';
    END IF;
    
    COMMIT;
END$$

DELIMITER ;

-- -----------------------------------------------------
-- procedure check_overlap_vet
-- -----------------------------------------------------

DELIMITER $$
USE `mydb`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `check_overlap_vet`(
    IN p_emailPadrone   VARCHAR(45),
    IN p_data           DATE,
    OUT p_overlap_count  INT
)
BEGIN
   
	DECLARE EXIT HANDLER FOR SQLEXCEPTION
    BEGIN
        ROLLBACK;
        RESIGNAL;
    END;


    START TRANSACTION;
	
    SELECT COUNT(*) INTO p_overlap_count
    FROM prenotazioneveterinario
    WHERE emailPadrone = p_emailPadrone
      AND data        = p_data
      AND stato NOT IN ('Rifiutata', 'Cancellata', 'Conclusa');
      
      
	COMMIT;

END$$

DELIMITER ;

-- -----------------------------------------------------
-- procedure updateProfiloPadrone
-- -----------------------------------------------------

DELIMITER $$
USE `mydb`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `updateProfiloPadrone`(
    IN p_email             VARCHAR(45),

    IN p_nomeCane          VARCHAR(100),
    IN p_sessoCane         CHAR(1),
    IN p_dataNascita       DATE,
    IN p_razzaCane         VARCHAR(100),
    IN p_vaccinazioni      TEXT,            

    IN p_nomePadrone       VARCHAR(100),
    IN p_telefonoPadrone   VARCHAR(20),
    IN p_indirizzoPadrone  VARCHAR(255),
    IN p_cittaPadrone      VARCHAR(100)
)
 BEGIN
    DECLARE v_oldMicrochip VARCHAR(50);
    DECLARE v_pos          INT DEFAULT 1;
    DECLARE v_next         INT;
    DECLARE v_len          INT;
    DECLARE v_vacc         VARCHAR(100);

    
    DECLARE EXIT HANDLER FOR SQLEXCEPTION
    BEGIN
        ROLLBACK;
        RESIGNAL;
    END;

    START TRANSACTION;
    
    SELECT `cane`
      INTO v_oldMicrochip
      FROM `mydb`.`padrone`
     WHERE `email` = p_email;

    IF v_oldMicrochip IS NULL THEN
        SIGNAL SQLSTATE '45000'
          SET MESSAGE_TEXT = 'Nessun cane trovato';
    END IF;

    
    UPDATE `mydb`.`cane`
    SET
        `nome`           = p_nomeCane,
        `sesso`          = p_sessoCane,
        `datadinascita`  = p_dataNascita,
        `razza`          = p_razzaCane
    WHERE `numeromicrochip` = v_oldMicrochip;

    
    UPDATE `mydb`.`padrone`
    SET
        `nome`      = p_nomePadrone,
        `telefono`  = p_telefonoPadrone,
        `indirizzo` = p_indirizzoPadrone,
        `citta`     = p_cittaPadrone
    WHERE `email` = p_email;

    
    DELETE
      FROM `mydb`.`vaccinazioni`
     WHERE `cane` = v_oldMicrochip;

   
    SET v_len = CHAR_LENGTH(p_vaccinazioni);
    WHILE v_pos <= v_len DO
        SET v_next = LOCATE(',', p_vaccinazioni, v_pos);
        IF v_next = 0 THEN
            SET v_next = v_len + 1;
        END IF;

        SET v_vacc = TRIM(SUBSTRING(p_vaccinazioni, v_pos, v_next - v_pos));
        IF v_vacc <> '' THEN
            INSERT INTO `mydb`.`vaccinazioni` (`cane`, `vaccinazione`)
            VALUES (v_oldMicrochip, v_vacc);
        END IF;

        SET v_pos = v_next + 1;
    END WHILE;

    COMMIT;
END$$

DELIMITER ;

-- -----------------------------------------------------
-- procedure updateProfiloDogsitter
-- -----------------------------------------------------

DELIMITER $$
USE `mydb`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `updateProfiloDogsitter`(
    IN in_email    VARCHAR(45),
    IN in_nome     VARCHAR(45),
    IN in_eta      INT,
    IN in_genere   CHAR(1),
    IN in_citta    VARCHAR(45),
    IN in_telefono BIGINT,
    IN in_orari    TEXT
)
BEGIN
    DECLARE giorno      VARCHAR(45);
    DECLARE orainizio   TIME;
    DECLARE orafine     TIME;
    DECLARE orario_text TEXT;
    DECLARE msg_error   TEXT DEFAULT '';

    
    DECLARE EXIT HANDLER FOR SQLEXCEPTION
    BEGIN
        ROLLBACK;
        RESIGNAL;
    END;

   
    START TRANSACTION;


  
    UPDATE mydb.dogsitter
       SET nome     = in_nome,
           eta      = in_eta,
           genere   = in_genere,
           citta    = in_citta,
           telefono = in_telefono
     WHERE email = in_email;

    IF ROW_COUNT() = 0 THEN
        SIGNAL SQLSTATE '45000'
            SET MESSAGE_TEXT = 'Nessun dogsitter trovato con questa email.';
    END IF;

   
    DELETE FROM mydb.orariodogsitter
     WHERE emaildogsitter = in_email;

  
    SET in_orari = CONCAT(TRIM(in_orari), ';');

    parsing_loop: WHILE CHAR_LENGTH(in_orari) > 1 DO
        SET orario_text = SUBSTRING_INDEX(in_orari, ';', 1);
        SET in_orari    = SUBSTRING(in_orari, CHAR_LENGTH(orario_text) + 2);

        IF TRIM(orario_text) = '' THEN
            ITERATE parsing_loop;
        END IF;

        SET giorno    = TRIM(SUBSTRING_INDEX(orario_text, ',', 1));
        SET orainizio = STR_TO_DATE(
                            SUBSTRING_INDEX(
                                SUBSTRING_INDEX(orario_text, ',', -2)
                            , ',', 1)
                        , '%H:%i:%s');
        SET orafine   = STR_TO_DATE(
                            SUBSTRING_INDEX(orario_text, ',', -1)
                        , '%H:%i:%s');

        IF orainizio IS NULL OR orafine IS NULL OR orainizio >= orafine THEN
            SET msg_error = CONCAT(msg_error,
                                   ' Orario non valido per ', giorno, ';');
        ELSE
            INSERT INTO mydb.orariodogsitter
                (emaildogsitter, giornosettimana, orainizio, orafine)
            VALUES
                (in_email, giorno, orainizio, orafine);
        END IF;
    END WHILE parsing_loop;

   
    IF msg_error <> '' THEN
        SIGNAL SQLSTATE '45000'
            SET MESSAGE_TEXT = msg_error;
    END IF;

    
    COMMIT;
END$$

DELIMITER ;

-- -----------------------------------------------------
-- procedure updateProfiloVeterinario
-- -----------------------------------------------------

DELIMITER $$
USE `mydb`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `updateProfiloVeterinario`(
    IN in_email        VARCHAR(45),
    IN in_nome         VARCHAR(45),
    IN in_genere       CHAR(1),
    IN in_eta          INT,
    IN in_citta        VARCHAR(45),
    IN in_indirizzo    VARCHAR(100),
    IN in_telefono     BIGINT,
    IN in_orari        TEXT
)
BEGIN
    DECLARE giorno        VARCHAR(45);
    DECLARE orainizio     TIME;
    DECLARE orafine       TIME;
    DECLARE orario_text   TEXT;
    DECLARE msg_error     TEXT DEFAULT '';


    DECLARE EXIT HANDLER FOR SQLEXCEPTION
    BEGIN
        ROLLBACK;
        RESIGNAL;
    END;


    START TRANSACTION;


    UPDATE mydb.veterinario
       SET nome     = in_nome,
           genere   = in_genere,
           eta      = in_eta,
           citta    = in_citta,
           indirizzo= in_indirizzo,
           telefono = in_telefono
     WHERE email = in_email;
    IF ROW_COUNT() = 0 THEN
        SIGNAL SQLSTATE '45000'
            SET MESSAGE_TEXT = 'Nessun veterinario trovato con questa email.';
    END IF;

    
    DELETE FROM mydb.orarioveterinario
     WHERE emailveterinario = in_email;

    
    SET in_orari = CONCAT(TRIM(in_orari), ';');
    parsing_loop: WHILE CHAR_LENGTH(in_orari) > 1 DO
        SET orario_text = SUBSTRING_INDEX(in_orari, ';', 1);
        SET in_orari    = SUBSTRING(in_orari, CHAR_LENGTH(orario_text) + 2);

        IF TRIM(orario_text) = '' THEN
            ITERATE parsing_loop;
        END IF;

        
        SET giorno    = TRIM(SUBSTRING_INDEX(orario_text, ',', 1));
        SET orainizio = STR_TO_DATE(
                            SUBSTRING_INDEX(
                                SUBSTRING_INDEX(orario_text, ',', -2)
                            , ',', 1)
                        , '%H:%i:%s');
        SET orafine   = STR_TO_DATE(
                            SUBSTRING_INDEX(orario_text, ',', -1)
                        , '%H:%i:%s');

        
        IF orainizio IS NULL OR orafine IS NULL OR orainizio >= orafine THEN
            SET msg_error = CONCAT(msg_error,
                                   ' Orario non valido per ', giorno, ';');
        ELSE
            INSERT INTO mydb.orarioveterinario
                (emailveterinario, giornosettimana, orainizio, orafine)
            VALUES
                (in_email, giorno, orainizio, orafine);
        END IF;
    END WHILE parsing_loop;

    IF msg_error <> '' THEN
        SIGNAL SQLSTATE '45000'
            SET MESSAGE_TEXT = msg_error;
    END IF;

    
    COMMIT;
END$$

DELIMITER ;

-- -----------------------------------------------------
-- procedure microchipCheck
-- -----------------------------------------------------

DELIMITER $$
USE `mydb`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `microchipCheck`(
    IN p_microchip VARCHAR(45),
    OUT p_result INT
)
BEGIN

	DECLARE EXIT HANDLER FOR SQLEXCEPTION
    BEGIN
        ROLLBACK;
        RESIGNAL;
    END;


    START TRANSACTION;


   
    SET p_result = 0;
    
    IF EXISTS (SELECT 1 FROM cane WHERE numeromicrochip = p_microchip) THEN
        SET p_result = 1;  
    END IF;
    
    COMMIT;
END$$

DELIMITER ;

SET SQL_MODE=@OLD_SQL_MODE;
SET FOREIGN_KEY_CHECKS=@OLD_FOREIGN_KEY_CHECKS;
SET UNIQUE_CHECKS=@OLD_UNIQUE_CHECKS;
START TRANSACTION;
USE mydb;

-- Popolo Database
INSERT INTO mydb.Utenti (username, `password`, ruolo, email) 
VALUES ('newpadrone', '04b9c07a5ce95c5997dfbee5a3df33a3', 'Padrone', 'new.padrone@gmail.com');

INSERT INTO mydb.Cane (nome, sesso, razza, datadinascita, numeromicrochip) 
VALUES ('Fido', 'M', 'Labrador', '2022-06-01', '1234567890');

INSERT INTO mydb.Padrone (email, nome, telefono, indirizzo, cane, citta) 
VALUES ('new.padrone@gmail.com', 'New Padrone', 1234567890, 'Via Nuova 10, Milano', '1234567890', 'Milano');

INSERT INTO mydb.Vaccinazioni (cane, vaccinazione) 
VALUES 
('1234567890', 'Vaccinazione Anti-rabbica'),
('1234567890', 'Vaccinazione Parvovirus'),
('1234567890', 'Vaccinazione Cimurro');

INSERT INTO mydb.Utenti (username, email, ruolo, `password`)
VALUES ('veterinario1', 'veterinario1@email.com', 'Veterinario', '04b9c07a5ce95c5997dfbee5a3df33a3');

INSERT INTO mydb.Veterinario (email,  nome, genere, eta, citta, indirizzo, telefono)
VALUES ('veterinario1@email.com', 'Mario Rossi', 'M', 35, 'Roma', 'Via Roma 123', 1234567890);

INSERT INTO mydb.OrarioVeterinario (emailveterinario, giornosettimana, orainizio, orafine)
VALUES 
  ('veterinario1@email.com', 'Lunedì', '09:00:00', '13:00:00'),
  ('veterinario1@email.com', 'Martedì', '14:00:00', '18:00:00'),
  ('veterinario1@email.com', 'Venerdì', '09:00:00', '13:00:00'),
  ('veterinario1@email.com', 'Martedì', '10:00:00', '12:00:00');

INSERT INTO mydb.Utenti (username, email, ruolo, `password`)
VALUES ('dogsitter1', 'dogsitter1@email.com', 'Dogsitter', '04b9c07a5ce95c5997dfbee5a3df33a3');

INSERT INTO mydb.Dogsitter (email, nome, eta, genere, citta, telefono)
VALUES ('dogsitter1@email.com', 'Anna Bianchi', 28, 'F', 'Milano', 1234567890);

INSERT INTO mydb.OrarioDogsitter (emaildogsitter, giornosettimana, orainizio, orafine)
VALUES 
  ('dogsitter1@email.com', 'Lunedì', '08:00:00', '12:00:00'),
  ('dogsitter1@email.com', 'Giovedì', '14:00:00', '18:00:00'),
  ('dogsitter1@email.com', 'Sabato', '09:00:00', '13:00:00'),
  ('dogsitter1@email.com', 'Sabato', '15:00:00', '18:00:00');

INSERT INTO mydb.PrenotazioneDogsitter (emailPadrone, emailDogsitter, oraInizio, oraFine, `data`, stato)
VALUES
('new.padrone@gmail.com', 'dogsitter1@email.com', '09:00:00', '11:00:00', '2025-07-14', 'InAttesa'),
('new.padrone@gmail.com', 'dogsitter1@email.com', '15:00:00', '17:00:00', '2025-07-17', 'InAttesa'),
('new.padrone@gmail.com', 'dogsitter1@email.com', '10:00:00', '12:00:00', '2025-07-19', 'InAttesa');

INSERT INTO mydb.PrenotazioneVeterinario (emailPadrone, emailVeterinario, `data`, oraInizio, stato)
VALUES
('new.padrone@gmail.com', 'veterinario1@email.com', '2025-07-21', '09:30:00', 'InAttesa'),
('new.padrone@gmail.com', 'veterinario1@email.com', '2025-07-22', '14:30:00', 'InAttesa'),
('new.padrone@gmail.com', 'veterinario1@email.com', '2025-07-18', '10:00:00', 'InAttesa');

COMMIT;